---
description: Guidelines for implementing Next.js API routes
globs:
alwaysApply: false
---
# API Routes

## Standard Format

Use this format for API routes:

```ts
import { z } from "zod";
import { NextResponse } from "next/server";
import { auth } from '@clerk/nextjs/server';
import prisma from '@/lib/prisma';
import { withError } from "@/middleware";

const apiNameBody = z.object({ id: z.string(), message: z.string() });
export type ApiNameBody = z.infer<typeof apiNameBody>;
export type UpdateApiNameResponse = Awaited<ReturnType<typeof updateApiName>>;

async function updateApiName(body: ApiNameBody, options: { email: string }) {
  const { email } = options;
  const result = await prisma.table.update({
    where: {
      id: body.id,
      email,
    },
    data: body,
  });

  return { result };
}

// For routes without params
export const POST = withError(async (request: Request) => {
  const session = await auth();
  if (!session?.user.email)
    return NextResponse.json({ error: "Not authenticated" });

  const json = await request.json();
  const body = apiNameBody.parse(json);

  const result = await updateApiName(body, { email: session.user.email });

  return NextResponse.json(result);
});

// For routes with params (note the params promise which is how Next.js 15+ works)
export const GET = withError(
  async (
    request: Request,
    { params }: { params: Promise<{ slug: string }> }
  ) => {
    const session = await auth();
    if (!session?.user.email)
      return NextResponse.json({ error: "Not authenticated" });

    const { slug } = await params;
    // Use the slug parameter...

    return NextResponse.json({ result });
  }
);
```

## Implementation Guidelines

- Use Zod for request body validation
- Create separate functions for business logic
- Wrap route handlers with `withError` middleware
- Always validate authentication with `auth()`
- Export typed responses for client usage
- For routes with dynamic parameters, use the new Next.js 15+ params format with async params

## Accessing API Routes from Client Components

When accessing API routes from client components in a project with internationalization (i18n):

```typescript
// API routes are excluded from i18n middleware in the middleware.ts configuration
const response = await fetch('/api/your-endpoint', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify(data),
});
```

Important notes:
- API routes are defined at `/api/*` and are excluded from locale routing in the middleware
- The middleware configuration has a special exception for paths starting with `/api/` to bypass the i18n middleware
- This allows direct access to API routes without locale prefixing
- Always use the direct path (e.g., `/api/feedback`) rather than trying to construct locale-aware paths
