import { Env } from './Env';

// Define the OpenRouter API types
export type OpenRouterMessage = {
  role: 'system' | 'user' | 'assistant';
  content: string;
};

export type OpenRouterCompletionOptions = {
  model: string;
  messages: OpenRouterMessage[];
  stream?: boolean;
  temperature?: number;
  max_tokens?: number;
};

// Create a mock OpenRouter client for development
class MockOpenRouter {
  completions = {
    create: async ({ messages, stream }: OpenRouterCompletionOptions) => {
      // This is a mock implementation that simulates streaming responses
      if (stream) {
        // Create a mock stream
        const mockStream = {
          async* [Symbol.asyncIterator]() {
            const userMessage = messages.find(m => m.role === 'user')?.content || '';
            const responseChunks = generateMockResponse(userMessage);

            // Simulate streaming by yielding chunks with delays
            for (const chunk of responseChunks) {
              yield {
                choices: [
                  {
                    delta: {
                      content: chunk,
                    },
                  },
                ],
              };

              // Add a small delay to simulate streaming
              await new Promise(resolve => setTimeout(resolve, 100));
            }
          },
        };

        return mockStream;
      } else {
        // Non-streaming response
        const userMessage = messages.find(m => m.role === 'user')?.content || '';
        const fullResponse = generateMockResponse(userMessage).join('');

        return {
          choices: [
            {
              message: {
                content: fullResponse,
              },
            },
          ],
        };
      }
    },
  };
}

// Helper function to generate mock responses based on the input
function generateMockResponse(input: string): string[] {
  // Check what kind of response to generate based on the input
  if (input.includes('research') || input.includes('SWOT')) {
    return mockResearchResponse();
  } else if (input.includes('questionnaire')) {
    return mockQuestionnaireResponse();
  } else if (input.includes('proposal')) {
    return mockProposalResponse();
  } else {
    // Default response
    return [
      'I understand your request. ',
      'Here is a response based on the information provided. ',
      'This is a mock response for development purposes. ',
      'In a production environment, this would be generated by the OpenRouter API.',
    ];
  }
}

// Mock research response
function mockResearchResponse(): string[] {
  return [
    '# Preliminary Research Report\n\n',
    '## Market Landscape\n\n',
    'The current market shows significant growth potential in the technology sector, with a CAGR of 12.5% expected over the next five years. Key trends include:\n\n',
    '- Increased adoption of cloud-based solutions\n',
    '- Growing demand for AI and machine learning integration\n',
    '- Rising focus on cybersecurity and data privacy\n',
    '- Shift towards subscription-based business models\n\n',

    '## Competitor Analysis\n\n',
    '### Major Players\n\n',
    '1. **Company A**\n',
    '   - Market share: 35%\n',
    '   - Strengths: Strong brand recognition, extensive product portfolio\n',
    '   - Weaknesses: Slow innovation cycle, higher pricing\n\n',

    '2. **Company B**\n',
    '   - Market share: 25%\n',
    '   - Strengths: Cutting-edge technology, aggressive marketing\n',
    '   - Weaknesses: Limited customer support, narrower product range\n\n',

    '3. **Company C**\n',
    '   - Market share: 15%\n',
    '   - Strengths: Competitive pricing, strong customer relationships\n',
    '   - Weaknesses: Smaller scale, limited global presence\n\n',

    '## SWOT Analysis\n\n',
    '### Strengths\n',
    '- Innovative product offerings\n',
    '- Strong technical expertise\n',
    '- Established customer base in related markets\n',
    '- Agile development methodology\n\n',

    '### Weaknesses\n',
    '- Limited market presence compared to larger competitors\n',
    '- Narrower product portfolio\n',
    '- Resource constraints for marketing and expansion\n',
    '- Dependency on key personnel\n\n',

    '### Opportunities\n',
    '- Growing market demand for integrated solutions\n',
    '- Potential for strategic partnerships\n',
    '- Expansion into emerging markets\n',
    '- Development of subscription-based revenue streams\n\n',

    '### Threats\n',
    '- Intense competition from established players\n',
    '- Rapidly changing technology landscape\n',
    '- Potential economic downturn affecting client budgets\n',
    '- Regulatory changes impacting product development\n\n',

    '## Recommendations\n\n',
    '1. Focus on differentiation through specialized features and superior user experience\n',
    '2. Develop strategic partnerships to expand market reach\n',
    '3. Implement a tiered pricing strategy to capture different market segments\n',
    '4. Invest in targeted marketing to increase brand awareness\n',
    '5. Prioritize customer success to build long-term relationships and recurring revenue\n\n',

    '## Conclusion\n\n',
    'The market presents significant opportunities despite competitive challenges. By leveraging existing strengths and addressing key weaknesses, there is a clear path to establishing a strong market position and achieving sustainable growth.',
  ];
}

// Mock questionnaire response
function mockQuestionnaireResponse(): string[] {
  return [
    '# Client Meeting Questionnaire\n\n',
    '## Business Background\n\n',
    '1. Can you provide a brief overview of your company\'s history and core business?\n',
    '2. What are your primary products/services?\n',
    '3. Who are your target customers/market segments?\n',
    '4. What is your current market position relative to competitors?\n',
    '5. What are your key differentiators in the market?\n\n',

    '## Current Challenges\n\n',
    '6. What specific business challenges are you currently facing?\n',
    '7. How are these challenges impacting your operations and growth?\n',
    '8. What solutions have you tried previously to address these challenges?\n',
    '9. What were the outcomes of those attempts?\n',
    '10. How urgent is the need to address these challenges?\n\n',

    '## Technical Environment\n\n',
    '11. What technologies and systems are you currently using?\n',
    '12. How well are these systems integrated with each other?\n',
    '13. What are the main pain points with your current technical infrastructure?\n',
    '14. Do you have any legacy systems that need to be maintained or replaced?\n',
    '15. What are your IT team\'s capabilities and resources?\n\n',

    '## Project Goals\n\n',
    '16. What specific outcomes are you hoping to achieve with this project?\n',
    '17. How do these outcomes align with your overall business strategy?\n',
    '18. What would success look like for this project?\n',
    '19. How do you plan to measure the success of this project?\n',
    '20. What is your vision for the future state after project completion?\n\n',

    '## Constraints and Requirements\n\n',
    '21. What is your budget range for this project?\n',
    '22. What is your expected timeline for implementation?\n',
    '23. Are there any specific compliance or regulatory requirements to consider?\n',
    '24. What are your security and data privacy requirements?\n',
    '25. Are there any technical or organizational constraints we should be aware of?\n\n',

    '## Stakeholders and Decision-Making\n\n',
    '26. Who are the key stakeholders for this project?\n',
    '27. What is the decision-making process for project approvals?\n',
    '28. Who will be the primary point of contact for the project?\n',
    '29. How would you prefer to handle project communications?\n',
    '30. What level of involvement do you expect from your team during the project?\n\n',

    '## Additional Information\n\n',
    '31. Is there any additional context or information that would be helpful for us to know?\n',
    '32. Do you have any specific concerns about the project that we haven\'t addressed?\n',
    '33. Are there any lessons learned from previous projects that you\'d like to share?\n',
    '34. What questions do you have for our team?\n',
    '35. Is there anything else you\'d like to discuss during our meeting?\n',
  ];
}

// Mock proposal response
function mockProposalResponse(): string[] {
  return [
    '# Project Proposal\n\n',
    '## Executive Summary\n\n',
    'This proposal outlines our approach to addressing [Client Name]\'s needs for [Project Goal]. Our solution will provide a comprehensive, scalable platform that addresses current challenges while positioning for future growth.\n\n',

    '## Understanding of Requirements\n\n',
    'Based on our discussions and analysis, we understand that [Client Name] is seeking to:\n\n',
    '- Improve operational efficiency through automation\n',
    '- Enhance data visibility and reporting capabilities\n',
    '- Integrate disparate systems into a unified platform\n',
    '- Scale operations while maintaining security and compliance\n\n',

    '## Proposed Solution\n\n',
    'We propose a phased implementation approach:\n\n',
    '### Phase 1: Discovery and Planning (2 weeks)\n',
    '- Detailed requirements gathering\n',
    '- Technical architecture design\n',
    '- Project plan development\n',
    '- Risk assessment and mitigation planning\n\n',

    '### Phase 2: Core Development (8 weeks)\n',
    '- Database design and implementation\n',
    '- API development\n',
    '- Core functionality implementation\n',
    '- Integration with existing systems\n\n',

    '### Phase 3: Testing and Refinement (4 weeks)\n',
    '- Comprehensive testing (unit, integration, system)\n',
    '- User acceptance testing\n',
    '- Performance optimization\n',
    '- Security auditing\n\n',

    '### Phase 4: Deployment and Training (2 weeks)\n',
    '- Production deployment\n',
    '- User training\n',
    '- Documentation\n',
    '- Knowledge transfer\n\n',

    '## Implementation Roadmap\n\n',
    '```\n',
    'Week 1-2:   Discovery and Planning\n',
    'Week 3-10:  Core Development\n',
    'Week 11-14: Testing and Refinement\n',
    'Week 15-16: Deployment and Training\n',
    '```\n\n',

    '## Team Structure\n\n',
    'Our project team will consist of:\n\n',
    '- Project Manager: Overall project coordination and client communication\n',
    '- Business Analyst: Requirements gathering and documentation\n',
    '- Solution Architect: Technical design and oversight\n',
    '- Senior Developers (2): Core development and integration\n',
    '- QA Engineer: Testing and quality assurance\n',
    '- UX Designer: User interface design and usability\n\n',

    '## Investment\n\n',
    'The estimated investment for this project is as follows:\n\n',
    '- Phase 1: $XX,XXX\n',
    '- Phase 2: $XX,XXX\n',
    '- Phase 3: $XX,XXX\n',
    '- Phase 4: $XX,XXX\n',
    '- Total: $XXX,XXX\n\n',

    '## Next Steps\n\n',
    '1. Proposal review and feedback\n',
    '2. Contract finalization\n',
    '3. Project kickoff meeting\n',
    '4. Begin Phase 1 activities\n\n',

    'We look forward to partnering with [Client Name] on this important initiative and are confident in our ability to deliver exceptional results that meet your business objectives.',
  ];
}

// OpenRouter API client
class OpenRouterClient {
  private apiKey: string;
  private baseUrl: string = 'https://openrouter.ai/api/v1';

  constructor(apiKey: string) {
    this.apiKey = apiKey;
  }

  completions = {
    create: async (options: OpenRouterCompletionOptions) => {
      const { model, messages, stream = false, temperature = 0.7, max_tokens } = options;

      const response = await fetch(`${this.baseUrl}/chat/completions`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${this.apiKey}`,
          'HTTP-Referer': window.location.origin, // Required for OpenRouter
          'X-Title': 'IELTS AI Tutor', // Optional, but good practice
        },
        body: JSON.stringify({
          model,
          messages,
          stream,
          temperature,
          max_tokens,
        }),
      });

      if (!response.ok) {
        const errorData = await response.json().catch(() => ({}));
        throw new Error(`OpenRouter API error: ${response.status} ${response.statusText} ${JSON.stringify(errorData)}`);
      }

      if (stream) {
        return this.handleStream(response);
      } else {
        const data = await response.json();
        return data;
      }
    },
  };

  private handleStream(response: Response) {
    const reader = response.body!.getReader();
    const decoder = new TextDecoder('utf-8');

    // Create a stream object that can be used with for-await-of
    return {
      async* [Symbol.asyncIterator]() {
        let buffer = '';

        try {
          while (true) {
            const { done, value } = await reader.read();

            if (done) {
              break;
            }

            // Decode the chunk and add it to the buffer
            buffer += decoder.decode(value, { stream: true });

            // Process the buffer to extract complete SSE messages
            const lines = buffer.split('\n');
            buffer = lines.pop() || ''; // Keep the last incomplete line in the buffer

            for (const line of lines) {
              if (line.startsWith('data: ')) {
                const data = line.slice(6);

                // Check if it's the [DONE] message
                if (data === '[DONE]') {
                  return;
                }

                try {
                  // Parse the JSON data
                  const parsedData = JSON.parse(data);
                  yield parsedData;
                } catch (e) {
                  console.error('Error parsing SSE data:', e);
                }
              }
            }
          }
        } finally {
          reader.releaseLock();
        }
      },
    };
  }
}

// Determine whether to use the real OpenRouter client or the mock one
const useMock = process.env.NODE_ENV === 'development' && !Env.NEXT_PUBLIC_OPENROUTER_API_KEY;

// Create a singleton instance of the OpenRouter client or use the mock
export const openRouter = useMock
  ? new MockOpenRouter()
  : new OpenRouterClient(Env.NEXT_PUBLIC_OPENROUTER_API_KEY || '');
